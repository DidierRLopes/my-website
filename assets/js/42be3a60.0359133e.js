"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[23792],{5135:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var i=n(49264),s=n(74848),r=n(28453);n(73748),n(41622);const o={slug:"2025-07-17-is-prompt-engineering-dead-the-case-for-test-driven-ai-development",title:"Is Prompt Engineering dead? The case for Test-Driven AI Development",date:new Date("2025-07-17T00:00:00.000Z"),image:"/blog/2025-07-17-is-prompt-engineering-dead-the-case-for-test-driven-ai-development",tags:["ai","prompt-engineering","llm","software-development","automation","agentic-ai","self-improving-ai","test-driven-development","control-systems"],description:"This post explores Test-Driven AI Development, where AI writes its own tests and prompts, potentially making manual prompt engineering obsolete. It covers how self-improving AI systems can be built and the implications of this paradigm shift.",hideSidebar:!0},a=void 0,l={authorsImageUrls:[]},d=[{value:"Test Driven Development: A quick refresher",id:"test-driven-development-a-quick-refresher",level:2},{value:"TDD with AI: First evolution",id:"tdd-with-ai-first-evolution",level:2},{value:"Prompt-Test Driven Development: The paradigm shift",id:"prompt-test-driven-development-the-paradigm-shift",level:2},{value:"The breakthrough: Self-improving AI",id:"the-breakthrough-self-improving-ai",level:2},{value:"The elegant insight: No external execution required",id:"the-elegant-insight-no-external-execution-required",level:2},{value:"The death of Prompt Engineering: Test Coverage as the new paradigm",id:"the-death-of-prompt-engineering-test-coverage-as-the-new-paradigm",level:2},{value:"Moving toward singularity",id:"moving-toward-singularity",level:2},{value:"The control systems perspective",id:"the-control-systems-perspective",level:2},{value:"The revolutionary potential",id:"the-revolutionary-potential",level:2}];function p(e){const t={a:"a",code:"code",em:"em",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("p",{align:"center",children:(0,s.jsx)("img",{width:"600",src:"/blog/2025-07-17-is-prompt-engineering-dead-the-case-for-test-driven-ai-development.png"})}),"\n",(0,s.jsx)(t.p,{children:"This post explores Test-Driven AI Development, where AI writes its own tests and prompts, potentially making manual prompt engineering obsolete. It covers how self-improving AI systems can be built and the implications of this paradigm shift."}),"\n","\n",(0,s.jsx)("div",{style:{borderTop:"1px solid #0088CC",margin:"1.5em 0"}}),"\n",(0,s.jsx)(t.p,{children:"I learned about Test Driven Development (TDD) a few years ago while working as a Firmware Engineer. What I didn't expect was how this traditional methodology would evolve into something that could fundamentally change how we build AI systems, and potentially make prompt engineering obsolete."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"The thesis:"})," If AI can write comprehensive tests from a PRD AND automatically generate prompts to pass those tests, then manual prompt engineering becomes as outdated as manually optimizing low-level assembly code."]}),"\n",(0,s.jsx)(t.h2,{id:"test-driven-development-a-quick-refresher",children:"Test Driven Development: A quick refresher"}),"\n",(0,s.jsx)(t.p,{children:"Skip this if you're familiar with TDD."}),"\n",(0,s.jsx)(t.p,{children:'Test-driven development is a software development process where tests are written before the actual code. The core process, known as "Red-Green-Refactor" involves writing a failing test, writing the minimal code to pass it, and then refactoring the code.'}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"# Test first\ndef test_discount():\n    assert calculate_discount(100, 0.1) == 90\n\n# Then minimal code\ndef calculate_discount(price, rate):\n    return price * (1 - rate)\n"})}),"\n",(0,s.jsx)(t.p,{children:"The traditional flow looks like this:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"Mock data  \u2500\u2500\u2500\u2500>  Code  \u2500\u2500\u2500\u2500>  Output \xd7 Tests\n                   \u2191              \u2502\n          Refactor \u2502              \u2502\n                   \u2514\u2500\u2500 Error \u2190\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,s.jsx)(t.p,{children:"The cycle continues: run the test, refactor the code, run the test again, until all tests pass."}),"\n",(0,s.jsx)(t.h2,{id:"tdd-with-ai-first-evolution",children:"TDD with AI: First evolution"}),"\n",(0,s.jsx)(t.p,{children:"TDD with AI becomes much easier. The concept is the same, except the user isn't required to refactor the code manually or run the tests."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"Mock data  \u2500\u2500\u2500\u2500>  Code  \u2500\u2500\u2500\u2500>  Output \xd7 Tests\n                   \u2191              \u2502\n              AI   \u2502              \u2502\n                   \u2514\u2500\u2500 Error \u2190\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,s.jsx)(t.p,{children:"The process simplifies to: ask AI to run the tests and fix any errors until they pass."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Critical lesson learned:"})," You must explicitly tell the AI it cannot modify the tests. Otherwise, it takes the easy path and just changes failing tests to pass. (This literally happened to me! \ud83d\ude43)"]}),"\n",(0,s.jsx)(t.h2,{id:"prompt-test-driven-development-the-paradigm-shift",children:"Prompt-Test Driven Development: The paradigm shift"}),"\n",(0,s.jsx)(t.p,{children:"Sometimes you want to test the agentic capabilities of your model. Assuming the tools are implemented correctly, you're actually testing the instructions - i.e. the prompt."}),"\n",(0,s.jsxs)(t.p,{children:["Prompt engineering is this whole new field that has emerged with LLMs. It is defined as: ",(0,s.jsx)(t.em,{children:'"the practice of crafting specific and effective instructions, known as prompts, to guide generative AI models in producing desired outputs"'}),". Chip Huyen's ",(0,s.jsx)(t.a,{href:"https://www.oreilly.com/library/view/ai-engineering/9781098166298/",children:"AI Engineering book"})," has an entire section on the topic (I highly recommend)."]}),"\n",(0,s.jsx)(t.p,{children:"When testing prompts, the flow becomes:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"Mock data  \u2500\u2500\u2500\u2500>  Prompt \u2192 LLM  \u2500\u2500\u2500\u2500>  Output \xd7 Tests\n                     \u2191                    \u2502\n           Improve   \u2502                    \u2502\n           Prompt    \u2502                    \u2502\n                     \u2514\u2500\u2500\u2500\u2500 Error \u2190\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,s.jsx)(t.p,{children:'Your "tests" become example scenarios with expected AI behaviors:'}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'Test: Customer asks "I want a refund"\nExpected: AI checks return policy first\nCurrent behavior: AI immediately offers refund\n\nResult: \u274c FAIL\n'})}),"\n",(0,s.jsx)(t.p,{children:'Your "code" is now the prompt that instructs the AI how to behave. When tests fail, you improve the prompt instead of traditional code.'}),"\n",(0,s.jsx)(t.h2,{id:"the-breakthrough-self-improving-ai",children:"The breakthrough: Self-improving AI"}),"\n",(0,s.jsx)(t.p,{children:"The same way we removed manual refactoring from traditional TDD, we can remove the human from prompt improvement:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"Mock data  \u2500\u2500>  Prompt + LLM + Tools  \u2500\u2500\u2500>  Output \xd7 Tests\n                       \u2191                           \u2502\n                    AI \u2502                           \u2502\n                       \u2514\u2500\u2500\u2500\u2500 Error \u2190\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Here's where it gets interesting: ",(0,s.jsx)(t.strong,{children:"the AI agent itself is a combination of Prompt + LLM + Tools"}),"."]}),"\n",(0,s.jsx)(t.p,{children:"When we use the same LLM to improve the prompt as the one our agent is built on, we create a self-reinforcing loop."}),"\n",(0,s.jsxs)("p",{align:"center",children:[(0,s.jsx)("img",{width:"900",src:"/blog/2025-07-17-is-prompt-engineering-dead-the-case-for-test-driven-ai-development_1.png"}),(0,s.jsx)("em",{style:{opacity:.9},children:"Real example of me utilizing this for our production tests"})]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Example in action:"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'Test: Customer asks "I want a refund"\n\nCurrent Prompt: "You are a helpful customer service agent".\nExpected: AI checks return policy first\nCurrent behavior: AI immediately offers refund\n\nAI Self-Analysis:\n"I failed because I offered a refund without checking policy. \nThe prompt lacks specific instructions about policy verification."\n\nAI-Generated Improvement: \n"You are a customer service agent. Always check the return \npolicy before processing refund requests. If eligible, explain \nthe process. If not, explain why and offer alternatives."\n\nTest Result: \u2705 PASS\n'})}),"\n",(0,s.jsx)(t.h2,{id:"the-elegant-insight-no-external-execution-required",children:"The elegant insight: No external execution required"}),"\n",(0,s.jsx)(t.p,{children:"The AI isn't even required to run tests using your framework. It can evaluate outcomes by examining the data directly."}),"\n",(0,s.jsx)(t.p,{children:'Since the AI helping you improve the prompt is the same as the one in production, it can "recreate" the output you would see just by looking at the code and data. No logs required, the model can predict its own behavior.'}),"\n",(0,s.jsx)(t.p,{children:"When you show an AI:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Current prompt"}),"\n",(0,s.jsx)(t.li,{children:"Mock input data"}),"\n",(0,s.jsx)(t.li,{children:"Expected output"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"The AI can immediately identify mismatches and generate improvements."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"The feedback loop happens entirely within the AI's reasoning process"}),", making iteration nearly instantaneous."]}),"\n",(0,s.jsx)(t.h2,{id:"the-death-of-prompt-engineering-test-coverage-as-the-new-paradigm",children:"The death of Prompt Engineering: Test Coverage as the new paradigm"}),"\n",(0,s.jsxs)(t.p,{children:["Here's the revolutionary implication: ",(0,s.jsx)(t.strong,{children:"if AI can generate both comprehensive test coverage from a PRD AND the prompts to pass those tests, then manual prompt engineering becomes obsolete"}),"."]}),"\n",(0,s.jsx)(t.p,{children:"Consider this progression:"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Manual Prompt Engineering (Current State):"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"Human writes requirements \u2192 Human crafts prompts \u2192 Test in production \u2192 Manual debugging\n"})}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Test-Driven AI Development (Future State):"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"Human writes requirements \u2192 AI generates comprehensive tests \u2192 AI generates optimal prompts \u2192 Continuous self-improvement\n"})}),"\n",(0,s.jsx)(t.p,{children:"With sufficient test coverage, prompts become an automatically generated implementation detail\u2014like compiled machine code that you never need to see or manually optimize."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"The new workflow"}),":"]}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsx)(t.li,{children:"Define behavioral requirements through examples"}),"\n",(0,s.jsx)(t.li,{children:"AI generates exhaustive test scenarios covering edge cases"}),"\n",(0,s.jsx)(t.li,{children:"AI automatically generates and refines prompts to pass all tests"}),"\n",(0,s.jsx)(t.li,{children:"System continuously improves itself as new test cases are added"}),"\n"]}),"\n",(0,s.jsx)("br",{}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:'Instead of asking "How do I prompt this AI?"'})," we ask ",(0,s.jsx)(t.strong,{children:'"How do I comprehensively test this behavior?"'})]}),"\n",(0,s.jsx)(t.h2,{id:"moving-toward-singularity",children:"Moving toward singularity"}),"\n",(0,s.jsx)(t.p,{children:"This is where we're approaching something unprecedented: AI that can fix itself, with humans only adding tests to guide its behavior."}),"\n",(0,s.jsx)(t.p,{children:"The key insight: instead of retraining models with new data (expensive, slow), we can improve behavior through prompt refinement (fast, cheap, immediate)."}),"\n",(0,s.jsx)(t.p,{children:"The system can literally predict and fix its own behavior through disciplined self-reflection."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Prompt engineering doesn't disappear\u2014it becomes automated."})}),"\n",(0,s.jsx)(t.h2,{id:"the-control-systems-perspective",children:"The control systems perspective"}),"\n",(0,s.jsx)(t.p,{children:"This reminds me of my MSc in Control Systems, where we learned that systems have poles that can be on the negative side (stable) or positive side (unstable)."}),"\n",(0,s.jsx)(t.p,{children:"The same principle applies here:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Stable:"})," AI generates genuinely better prompts \u2192 improved performance \u2192 convergence"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Unstable:"})," AI games the system \u2192 overfitting to tests \u2192 real-world failure"]}),"\n"]}),"\n",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Warning signs of instability:"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Prompts becoming absurdly specific to test cases"}),"\n",(0,s.jsx)(t.li,{children:'AI suggesting test modifications "for clarity"'}),"\n",(0,s.jsx)(t.li,{children:"Tests passing but real-world performance degrading"}),"\n"]}),"\n",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Maintaining stability:"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Lock test cases as immutable"}),"\n",(0,s.jsx)(t.li,{children:"Monitor real-world performance alongside test performance"}),"\n",(0,s.jsx)(t.li,{children:"Explicitly forbid test modifications in improvement instructions"}),"\n"]}),"\n",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(t.p,{children:"The incentive should always be to pass the tests AS THEY ARE."}),"\n",(0,s.jsx)(t.h2,{id:"the-revolutionary-potential",children:"The revolutionary potential"}),"\n",(0,s.jsx)(t.p,{children:"This isn't just about better prompts\u2014it's about creating AI systems that can debug their own reasoning processes in real-time."}),"\n",(0,s.jsx)(t.p,{children:"We're moving toward AI that doesn't just follow instructions, but improves the instructions themselves through disciplined self-reflection."}),"\n",(0,s.jsx)(t.p,{children:'Prompt engineering as we know it may be dead, which is scary because this is how we "control" AI.'}),"\n",(0,s.jsxs)(t.p,{children:["The question is: ",(0,s.jsx)(t.strong,{children:"are we ready to let AI systems write their own prompt"}),", or do we still need the illusion of control that manual prompting provides?"]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},41622:(e,t,n)=>{n.d(t,{A:()=>v});var i=n(96540),s=n(18215),r=n(15066),o=n(63427),a=n(92303),l=n(41422);const d={details:"details_lb9f",isBrowser:"isBrowser_bmU9",collapsibleContent:"collapsibleContent_i85q"};var p=n(74848);function h(e){return!!e&&("SUMMARY"===e.tagName||h(e.parentElement))}function c(e,t){return!!e&&(e===t||c(e.parentElement,t))}function m({summary:e,children:t,...n}){(0,o.A)().collectAnchor(n.id);const s=(0,a.A)(),m=(0,i.useRef)(null),{collapsed:g,setCollapsed:u}=(0,l.u)({initialState:!n.open}),[v,f]=(0,i.useState)(n.open),x=i.isValidElement(e)?e:(0,p.jsx)("summary",{children:e??"Details"});return(0,p.jsxs)("details",{...n,ref:m,open:v,"data-collapsed":g,className:(0,r.A)(d.details,s&&d.isBrowser,n.className),onMouseDown:e=>{h(e.target)&&e.detail>1&&e.preventDefault()},onClick:e=>{e.stopPropagation();const t=e.target;h(t)&&c(t,m.current)&&(e.preventDefault(),g?(u(!1),f(!0)):u(!0))},children:[x,(0,p.jsx)(l.N,{lazy:!1,collapsed:g,onCollapseTransitionEnd:e=>{u(e),f(!e)},children:(0,p.jsx)("div",{className:d.collapsibleContent,children:t})})]})}const g={details:"details_b_Ee"},u="alert alert--info";function v({...e}){return(0,p.jsx)(m,{...e,className:(0,s.A)(u,g.details,e.className)})}},49264:e=>{e.exports=JSON.parse('{"permalink":"/blog/2025-07-17-is-prompt-engineering-dead-the-case-for-test-driven-ai-development","editUrl":"https://github.com/DidierRLopes/my-website/tree/main/blog/2025-07-17-is-prompt-engineering-dead-the-case-for-test-driven-ai-development.md","source":"@site/blog/2025-07-17-is-prompt-engineering-dead-the-case-for-test-driven-ai-development.md","title":"Is Prompt Engineering dead? The case for Test-Driven AI Development","description":"This post explores Test-Driven AI Development, where AI writes its own tests and prompts, potentially making manual prompt engineering obsolete. It covers how self-improving AI systems can be built and the implications of this paradigm shift.","date":"2025-07-17T00:00:00.000Z","tags":[{"inline":true,"label":"ai","permalink":"/blog/tags/ai"},{"inline":true,"label":"prompt-engineering","permalink":"/blog/tags/prompt-engineering"},{"inline":true,"label":"llm","permalink":"/blog/tags/llm"},{"inline":true,"label":"software-development","permalink":"/blog/tags/software-development"},{"inline":true,"label":"automation","permalink":"/blog/tags/automation"},{"inline":true,"label":"agentic-ai","permalink":"/blog/tags/agentic-ai"},{"inline":true,"label":"self-improving-ai","permalink":"/blog/tags/self-improving-ai"},{"inline":true,"label":"test-driven-development","permalink":"/blog/tags/test-driven-development"},{"inline":true,"label":"control-systems","permalink":"/blog/tags/control-systems"}],"readingTime":6.21,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"2025-07-17-is-prompt-engineering-dead-the-case-for-test-driven-ai-development","title":"Is Prompt Engineering dead? The case for Test-Driven AI Development","date":"2025-07-17T00:00:00.000Z","image":"/blog/2025-07-17-is-prompt-engineering-dead-the-case-for-test-driven-ai-development","tags":["ai","prompt-engineering","llm","software-development","automation","agentic-ai","self-improving-ai","test-driven-development","control-systems"],"description":"This post explores Test-Driven AI Development, where AI writes its own tests and prompts, potentially making manual prompt engineering obsolete. It covers how self-improving AI systems can be built and the implications of this paradigm shift.","hideSidebar":true},"unlisted":false,"prevItem":{"title":"Can we kill the term \\"vibe coding\\"?","permalink":"/blog/2025-07-25-can-we-kill-the-term-vibe-coding"},"nextItem":{"title":"Finance\'s OceanGate moment - The AI adoption disaster waiting to happen","permalink":"/blog/2025-07-09-finances-oceangate-moment-the-ai-adoption-disaster-waiting-to-happen"}}')}}]);